@page "/fetchdata"

<PageTitle>Items</PageTitle>

@using DomainModel.SimulationKernel
@using ServiceLayer.SimulationKernel
@using SimulationKernel.Data

@implements IDisposable

<AuthorizeView>
  <Authorized>
    <div class="m-5">
      <div class="col-xl-12">
        <div class="card shadow">
          <div class="card-header">
            <h4>Processings</h4>
          </div>
          <div class="card-body">

            @if (Items == null)
            {
              <p><em>Loading...</em></p>
            }
            else
            {
              <div class="album">
                <div class="container">
                  <div class="row">
                    @foreach (var item in Items)
                    {
                      <SimulationItem Data="@item" JSStore="@_JSStore" />
                    }
                  </div>
                </div>
              </div>
              <div class="d-flex justify-content-center">
                <nav>
                  <ul class="pagination">
                    @for (int pageNumber = 0; pageNumber < _NumberOfPages && pageNumber < _MaxNumberOfPages; ++pageNumber)
                    {
                      int page = pageNumber + 1;
                      <li class="page-item"><a class="page-link text-secondary" style="@StyleForPageNumber(page)" @onclick="() => GetUserProcessings(page)" href="" @onclick:preventDefault>@(page)</a></li>
                    }
                  </ul>
                </nav>
              </div>
            }

          </div>
        </div>
      </div>


      <div class="col-xl-12  mt-5">
        <div class="card shadow">
          <div class="card-header">
            <div class="btn-toolbar bg-light p-1" role="toolbar" aria-label="Toolbar with button groups">
              <div class="btn-group mr-2" role="group" aria-label="First group">
                <button @onclick="ResetCamera" type="button" class="btn btn-outline-secondary">Reset camera</button>
                <button @onclick="Play" type="button" class="btn btn-outline-secondary" disabled="@(_JSStore.Files == 0 || _Playing)">
                  <img src="icons/play_arrow_FILL0_wght100_GRAD200_opsz24.svg" />
                </button>
                <button @onclick="Stop" type="button" class="btn btn-outline-secondary" disabled="@(_JSStore.Files == 0)">
                  <img src="icons/stop_FILL0_wght100_GRAD200_opsz20.svg" />
                </button>
              </div>
            </div>
          </div>

          <input @oninput="@UpdateFrame"
                 min=0
                 max=@_JSStore.Files
                 disabled="@(_JSStore.Files == 0)"
                 type="range" class="m-4 form-range" />

          <div @ref=_CanvasHostReference></div>
        </div>
      </div>
    </div>
  </Authorized>

  <NotAuthorized>
    <NotAuthorizedDisplay />
  </NotAuthorized>
</AuthorizeView>

@code {
  private ElementReference _CanvasHostReference;
  private SimulationItem.JSModuleStore _JSStore = default!;
  private IList<SimulationMetadata>? Items;
  private bool _Playing = false;
  private int _NumberOfPages = 0;
  private int _CurrentPage = 0;
  private CancellationTokenSource? _CancellationToken;

  private static readonly int _MaxNumberOfPages = 5;
  private static readonly int _MaxNumberOfItemsPerPages = 3;

  [Inject]
  private IJSRuntime JSRuntime { get; set; } = default!;
  [Inject]
  private ILogger<FetchData> Logger { get; set; } = default!;
  [Inject]
  private ISimulationMetadataService SimulationService { get; set; } = default!;

  [CascadingParameter]
  public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

  protected override void OnInitialized()
  {
    _JSStore = new SimulationItem.JSModuleStore(
      () => StateHasChanged(),
      async item =>
      {
        await GetUserProcessings(pageNumber: 1);
        StateHasChanged();
      });
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/scene.js");
      if (module != null && _CanvasHostReference.Context != null)
      {
        _JSStore.Module = module;
        await _JSStore.Module.InvokeVoidAsync("renderScene", _CanvasHostReference);
      }
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    await GetUserProcessings(pageNumber: 1);
  }


  private async Task GetUserProcessings(int pageNumber)
  {
    var authState = await AuthenticationStateTask;
    var user = authState.User;
    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
      var userName = user.Identity.Name;
      Items = SimulationService.GetUserProcessings(userName, pageNumber, pageSize: 3).ToList();
      int numberOfProcessings = SimulationService.GetUserProcessings(userName);
      _NumberOfPages = (int) Math.Ceiling((decimal)numberOfProcessings / _MaxNumberOfItemsPerPages);
      _CurrentPage = pageNumber;
    }
  }

  private async Task ResetCamera()
  {
    if (_JSStore.Module != null)
    {
      await _JSStore.Module.InvokeVoidAsync("resetCamera");
    }
  }

  private async Task Play()
  {
    _Playing = true;
    if (_JSStore.Module != null)
    {
      try
      {
        _CancellationToken = new CancellationTokenSource();
        for (int i = 0; i < 50; ++i)
        {
          for (int frame = 0; frame < _JSStore.Files; ++frame)
          {
            _CancellationToken.Token.ThrowIfCancellationRequested();
            await Task.Delay(10);
            await _JSStore.Module.InvokeVoidAsync("updateFrameByIndex", frame);
          }
        }
      }
      catch (OperationCanceledException)
      {
      }
      finally
      {
        _CancellationToken = null;
      }
    }
    _Playing = false;
  }

  private void Stop()
  {
    _Playing = false;
    _CancellationToken?.Cancel();
  }

  private string StyleForPageNumber(int pageNumber)
  {
    return pageNumber == _CurrentPage ? "background-color:#F8F9FA" : string.Empty;
  }

  private async Task UpdateFrame(ChangeEventArgs e)
  {
    int frame = Convert.ToInt32(e.Value);

    if (_JSStore.Module != null)
    {
      await _JSStore.Module.InvokeVoidAsync("updateFrameByIndex", frame);
    }
  }

  public void Dispose()
  {
    try
    {
      Stop();
      GC.SuppressFinalize(this);
    }
    catch (JSDisconnectedException)
    {
      System.Diagnostics.Debug.WriteLine("JavaScript runtime disconnected (SignalR disconnected).");
    }
  }

}