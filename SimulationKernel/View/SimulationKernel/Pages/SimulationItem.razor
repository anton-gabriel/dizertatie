@using DomainModel.SimulationKernel
@using SimulationKernel.Data
@inject IJSRuntime _JS
@implements IAsyncDisposable

<div class="col-md-4">
  <div class="card mb-4 shadow-sm rounded-bottom">
    <div @ref=_CanvasReference></div>
    <div class="card-body">
      <div class="d-flex flex-row align-items-center">
        <div class="icon"> <img src="icons/task_white_36dp.svg" /> </div>
        <div class="ms-2 c-details">
          <span style="font-weight:bold;">@Data.Name</span><br/>
          <span>@Data.CreationDate</span>
        </div>
      </div>
      <div class="badge"> <span class="text-warning">@Data.Status</span> </div>
      <div class="progress mt-3 mb-3">
        <div class="progress-bar bg-success" role="progressbar" style="width: 75%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">75%</div>
      </div>
      <div class="d-flex justify-content-between align-items-center">
        <div class="btn-group">
          <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
        </div>
        <small class="text-muted">@($"{Data.Duration?.Minutes}m {Data.Duration?.Seconds}s")</small>
      </div>
    </div>
  </div>
</div>

@code {
  private ElementReference _CanvasReference;
  private IJSObjectReference? _Module;

  [Parameter]
  public SimulationMetadata Data { get; set; } = SimulationMetadata.Empty;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _Module = await _JS.InvokeAsync<IJSObjectReference>("import", "/js/scene_item.js");
      if (_Module != null)
      {
        await _Module.InvokeVoidAsync("renderInit", _CanvasReference);
      }
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    if (_Module is not null)
    {
      await _Module.DisposeAsync();
    }
  }
}
