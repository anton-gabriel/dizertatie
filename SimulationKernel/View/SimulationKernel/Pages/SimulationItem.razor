@using DomainModel.SimulationKernel
@using ServiceLayer.SimulationKernel
@using SimulationKernel.Data

<div class="col-md-4 h-100">
  <div class="card mb-4 shadow-sm rounded-bottom">
    <div class="card-body">
      <div class="d-flex flex-row align-items-center">
        <div class="icon"> <img src="icons/task_white_36dp.svg" /> </div>
        <div class="ms-2 c-details">
          <span style="font-weight:bold;">@Data.Name</span><br />
          <span>@Data.CreationDate</span>
        </div>
      </div>
      <span class="badge @StatusClass(Data.Status) mb-2">@Data.Status</span>
      @if (@_ProgressPercent.HasValue)
      {
        <div class="progress mb-2" style="height:5px;">
          <div class="progress-bar bg-info" role="progressbar" aria-valuenow="@_ProgressPercent.Value" aria-valuemin="0" aria-valuemax="100" style="width:@_ProgressPercent.Value%"></div>
        </div>
      }
      else
      {
        <div class="mb-2" style="height:5px;"></div>
      }
      <div class="d-flex justify-content-between align-items-center">
        <div class="btn-group">
          <button type="button" disabled="@(Data.Status != ProcessingStatus.Completed)" @onclick="ViewData" class="btn btn-sm btn-outline-secondary">View</button>
          <button type="button" @onclick="RemoveData" class="btn btn-sm btn-outline-secondary">Remove</button>
        </div>
        @if (@Data.Duration.HasValue)
        {
          <small class="text-muted">@($"{Data.Duration?.Minutes}m {Data.Duration?.Seconds}s")</small>
        }
      </div>
    </div>
  </div>
</div>

@code {
  public record JSModuleStore(Action UpdateDelegate)
  {
    public IJSObjectReference Module { get; set; } = default!;
    public int Files { get; set; }
    public void Update()
    {
      UpdateDelegate?.Invoke();
    }
  }

  private uint? _ProgressPercent;
  private IJSObjectReference? _JSModule;


  [Parameter, EditorRequired]
  public JSModuleStore JSStore { get; set; } = default!;
  [Parameter, EditorRequired]
  public SimulationMetadata Data { get; set; } = SimulationMetadata.Empty;
  [Inject]
  private ITransferDataService TransferDataService { get; set; } = default!;
  [Inject]
  private IJSRuntime JSRuntime { get; set; } = default!;


  private string StatusClass(ProcessingStatus status)
  {
    switch (status)
    {
      case ProcessingStatus.NotStarted:
        return "alert-secondary";
      case ProcessingStatus.Processing:
        return "alert-info";
      case ProcessingStatus.Completed:
        return "alert-success";
      default:
        return "alert-secondary";
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/download.js");
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  private async Task ViewData()
  {
    _ProgressPercent = 0;

    if (JSStore != null)
    {
      JSStore.Files = 0;
      await JSStore.Module.InvokeVoidAsync("clearFrames", 0);
    }

    Generated.TransferStatus result = await TransferDataService
      .DownloadAsync(Data.OutputDataLocation, new Progress<uint>((percent) =>
      {
        _ProgressPercent = (uint)(percent);
        StateHasChanged();
      }), f => { });

      //async f =>
      //{
      //  if (JSStore != null)
      //  {
      //    await JSStore.Module.InvokeVoidAsync("loadFrame", f.file, f.bytes);
      //    JSStore.Files++;
      //    StateHasChanged();
      //  }
      //});

    //Select first frame
    if (JSStore != null)
    {
      await JSStore.Module.InvokeVoidAsync("updateFrameByIndex", 0);
      JSStore.Update();
    }

    _ProgressPercent = null;
  }

  private async Task RemoveData()
  {
    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
    if (confirmed)
    {
        // Delete!
    }
  }
}
